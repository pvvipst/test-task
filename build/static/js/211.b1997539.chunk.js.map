{"version":3,"file":"static/js/211.b1997539.chunk.js","mappings":"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","sources":["app/components/common/table/_setting.ts","app/components/common/table/_styles.ts","app/components/common/table/index.tsx","data/repository/menu/index.ts","domain/menu/use-case/index.ts","app/pages/menu/index.tsx","app/pages/menu/requests/use-get-menu.ts","data/common/services/http/common/index.ts","data/common/services/http/service/index.ts","domain/common/services/exeption-service/index.ts","domain/common/internal-code/index.ts"],"sourcesContent":["import type { IMenuDTO, IMenuOtherDTO } from '@domain/menu'\n\nimport type { GridColDef, GridRenderCellParams } from '@mui/x-data-grid'\n\nconst TEST_DATA: IMenuDTO[] = [\n  { id: 1, name: '123123', filial: { id: 1, name: 'www333' }, tt: { id: 1, name: 'rrreee' }, active: true, export: []},\n  { id: 2, name: '123123', filial: { id: 1, name: 'www333' }, tt: { id: 1, name: 'rrreee' }, active: true, export: []},\n  { id: 3, name: '123123', filial: { id: 1, name: 'www333' }, tt: { id: 1, name: 'rrreee' }, active: true, export: []},\n  { id: 4, name: '123123', filial: { id: 1, name: 'www333' }, tt: { id: 1, name: 'rrreee' }, active: true, export: []},\n  { id: 5, name: '123123', filial: { id: 1, name: 'www333' }, tt: { id: 1, name: 'rrreee' }, active: true, export: []},\n  { id: 6, name: '123123', filial: { id: 1, name: 'www333' }, tt: { id: 1, name: 'rrreee' }, active: true, export: []},\n  { id: 7, name: '123123', filial: { id: 1, name: 'www333' }, tt: { id: 1, name: 'rrreee' }, active: true, export: []},\n]\n\nconst COLUMNS: GridColDef[] = [\n  { field: 'id', flex: 1 },\n  { field: 'name', flex: 1 },\n  {\n    field: 'filial',\n    flex: 1,\n    renderCell: (params: GridRenderCellParams<any, IMenuOtherDTO>) => params.value?.name\n  },\n  {\n    field: 'tt',\n    flex: 1,\n    renderCell: (params: GridRenderCellParams<any, IMenuOtherDTO>) => params.value?.name\n  },\n  {\n    field: 'active',\n    flex: 1,\n    renderCell: (params: GridRenderCellParams<any, boolean>) => params.value === true ? 'Активен' : 'Не активен'\n  },\n]\n\nexport { COLUMNS, TEST_DATA }\n","import { Box, styled } from '@mui/material'\n\nconst TABLE_STYLES = {\n  Wrapper: styled(Box)``\n}\n\nexport { TABLE_STYLES }\n","import { DataGrid } from '@mui/x-data-grid'\n\nimport { COLUMNS } from './_setting'\n\nimport { TABLE_STYLES as Component } from './_styles'\n\nimport type { IMenuDTO } from '@domain/menu'\n\ninterface ITableProps {\n  rows: IMenuDTO[]\n}\n\nconst Table = ({ rows }: ITableProps): JSX.Element => {\n  return (\n    <Component.Wrapper>\n      <DataGrid\n        rows={ rows }\n        columns={ COLUMNS }\n      />\n    </Component.Wrapper>\n  )\n}\n\nexport default Table\n","import { HttpService } from '@data/common'\n\nimport { ExceptionService, InternalCode } from '@domain/common'\n\nimport type { IGetMenuUseCasePort, IMenuDTO, IMenuRepository } from '@domain/menu'\n\nclass MenuRepository implements IMenuRepository {\n\n  public async getMenu (port: IGetMenuUseCasePort): Promise<IMenuDTO[]> {\n    const { id, ...params } = port\n    return HttpService.get<IMenuDTO[]>(`filial/${id}/menu?limit=100`, { params })\n      .then((res) => res)\n      .catch(() => {\n        throw ExceptionService.new({\n          status: {\n            code: InternalCode.SERVER_ERROR,\n            message: 'Server return bad request'\n          }\n        })\n      })\n  }\n\n}\n\nexport default MenuRepository\n","import type { IGetMenuUseCase, IGetMenuUseCasePort, IMenuDTO, IMenuRepository } from '@domain/menu'\n\nclass GetMenuUseCase implements IGetMenuUseCase {\n\n  private _repository: IMenuRepository\n\n  constructor (repository: IMenuRepository) {\n    this._repository = repository\n  }\n\n  public async execute (port: IGetMenuUseCasePort): Promise<IMenuDTO[]> {\n    return this._repository.getMenu(port)\n  }\n\n}\n\nexport default GetMenuUseCase\n","import { useEffect, useState } from 'react'\n\nimport Table from '@app/components/common/table'\nimport { useFilialContext } from '@app/common/filial'\nimport { useGetMenu } from '@app/pages/menu/requests/use-get-menu'\n\nimport { useFilterMenuContext } from '@app/common/filter-menu'\n\nimport type { IMenuDTO } from '@domain/menu'\n\nconst MenuPage = (): JSX.Element => {\n  const [rows, setRows] = useState<IMenuDTO[]>([])\n  const { mutateAsync } = useGetMenu(setRows)\n  const { selectedFilial } = useFilialContext()\n  const { name, tt, active, filial } = useFilterMenuContext()\n\n  useEffect(() => {\n    if (selectedFilial !== null)\n      void mutateAsync({ id: selectedFilial, name, active, filial, tt })\n  }, [selectedFilial, name, tt, active, filial])\n\n  return (\n    <Table rows={ rows } />\n  )\n}\n\nexport default MenuPage\n","import { useMutation } from '@tanstack/react-query'\n\nimport MenuRepository from '@data/repository/menu'\nimport GetMenuUseCase from '@domain/menu/use-case'\n\nimport type { Dispatch, SetStateAction } from 'react'\n\nimport type { UseMutationResult } from '@tanstack/react-query'\n\nimport type { IGetMenuUseCasePort, IMenuDTO } from '@domain/menu'\n\ntype UseGetMenuResult = UseMutationResult<IMenuDTO[], unknown, IGetMenuUseCasePort>\n\nconst useGetMenu = (setter: Dispatch<SetStateAction<IMenuDTO[]>>): UseGetMenuResult => {\n  const repository = new MenuRepository()\n  const useCase = new GetMenuUseCase(repository)\n\n  const callback = async (port: IGetMenuUseCasePort): Promise<IMenuDTO[]> => {\n    return useCase.execute(port)\n  }\n\n  return useMutation(['get menu'], callback, {\n    onSuccess: (data) => {\n      setter(data)\n    }\n  })\n}\n\nexport { useGetMenu }\n","import { HttpService } from '@data/common/services/http/service'\n\nexport default new HttpService({\n  baseURL: process.env.REACT_APP_BASE_DOMAIN,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n","import axios from 'axios'\n\nimport type { IGetPayload, IHttpResponse, IHttpService, IPostPayload } from '@data/common'\n\nimport type { AxiosRequestConfig, AxiosInstance, AxiosError } from 'axios'\n\nclass HttpService implements IHttpService {\n\n  protected _globalConfig: AxiosRequestConfig & { retry: boolean }\n\n  protected _instance: AxiosInstance\n\n  protected _droppedRequests: AxiosRequestConfig[]\n\n  constructor (config: AxiosRequestConfig) {\n    this._globalConfig = { retry: false }\n    this._droppedRequests = []\n\n    this._instance = axios.create({ ...config, ...this._globalConfig })\n\n    this._interceptResponse()\n  }\n\n  public setHeaders (key: string, value: string | number | boolean): void {\n    this._instance.defaults.headers.common[key] = value\n  }\n\n  public async get<Response> (url: string, payload?: IGetPayload): Promise<Response> {\n    return this._instance.get(url, {\n      params: payload?.params,\n      ...this._globalConfig\n    })\n  }\n\n  public async post<Response> (url: string, payload?: IPostPayload): Promise<Response> {\n    return this._instance.post(url, payload?.body, {\n      params: payload?.params,\n      responseType: payload?.responseType,\n      ...this._globalConfig\n    })\n  }\n\n  public async put<Response> (url: string, payload?: IPostPayload): Promise<Response> {\n    return this._instance.put(url, payload?.body, {\n      params: payload?.params,\n      ...this._globalConfig\n    })\n  }\n\n  public async patch<Response> (url: string, payload?: IPostPayload): Promise<Response> {\n    return this._instance.patch(url, payload?.body, {\n      params: payload?.params,\n      ...this._globalConfig\n    })\n  }\n\n  public async delete<Response> (url: string, payload?: IPostPayload): Promise<Response> {\n    return this._instance.delete(url, {\n      params: payload?.params,\n      data: payload?.body,\n      ...this._globalConfig\n    })\n  }\n\n  private _interceptResponse (): void {\n    this._instance.interceptors.response.use(\n      this._handleResponse.bind(this),\n      this._handleErrorResponse.bind(this)\n    )\n  }\n\n  private async _handleResponse (response: AxiosRequestConfig<IHttpResponse<unknown>>): Promise<unknown> {\n    return Promise.resolve(response.data?.data === undefined ? response.data : response.data.data)\n  }\n\n  private async _handleErrorResponse (error: AxiosError): Promise<unknown> {\n    console.log('promise reject', error.response?.data)\n    return Promise.reject(error.response?.data)\n  }\n\n}\n\nexport { HttpService }\n","import type { IStatusCode } from '@domain/common'\n\ninterface ICreateExceptionPayload<Data> {\n  status: IStatusCode\n  data?: Data\n}\n\nclass ExceptionService<Data> extends Error {\n\n  public readonly code: number\n\n  public readonly data?: Data\n\n  private constructor (statusCode: IStatusCode, data?: Data) {\n    super()\n\n    this.name = this.constructor.name\n    this.code = statusCode.code\n    this.data = data\n    this.message = statusCode.message\n\n    if (typeof Error.captureStackTrace === 'function') Error.captureStackTrace(this, this.constructor)\n  }\n\n  public static new<Data>(payload: ICreateExceptionPayload<Data>): ExceptionService<Data> {\n    return new ExceptionService(payload.status, payload.data)\n  }\n\n}\n\nexport { ExceptionService }\nexport type { ICreateExceptionPayload }\n","enum InternalCode {\n  SERVER_ERROR = 1000\n}\n\nexport { InternalCode }\n"],"names":["COLUMNS","field","flex","renderCell","params","_params$value","value","name","_params$value2","TABLE_STYLES","Wrapper","styled","Box","_templateObject","_taggedTemplateLiteral","_ref","rows","_jsx","Component","children","DataGrid","columns","getMenu","port","id","HttpService","get","concat","then","res","catch","ExceptionService","new","status","code","InternalCode","SERVER_ERROR","message","constructor","repository","_repository","this","execute","MenuPage","setRows","useState","mutateAsync","setter","MenuRepository","useCase","GetMenuUseCase","useMutation","async","onSuccess","data","useGetMenu","selectedFilial","useFilialContext","tt","active","filial","useFilterMenuContext","useEffect","Table","config","_globalConfig","_instance","_droppedRequests","retry","axios","_interceptResponse","setHeaders","key","defaults","headers","common","url","payload","post","body","responseType","put","patch","delete","interceptors","response","use","_handleResponse","bind","_handleErrorResponse","_response$data","Promise","resolve","undefined","error","_error$response","_error$response2","console","log","reject","baseURL","process","Error","statusCode","super","captureStackTrace"],"sourceRoot":""}